class Solution {
private:
    vector<int> parent, rank;

    int find(int x) {
        if (parent[x] != x) 
            parent[x] = find(parent[x]);
        return parent[x];
    }

    bool unionSet(int x, int y) {
        int rx = find(x), ry = find(y);
        if (rx == ry) return true;

        if (rank[rx] > rank[ry]) parent[ry] = rx;
        else if (rank[rx] < rank[ry]) parent[rx] = ry;
        else {
            parent[ry] = rx;
            rank[rx]++;
        }
        return false;
    }

public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        parent.resize(n + 1);
        rank.resize(n + 1, 0);

        for (int i = 0; i <= n; ++i) parent[i] = i;

        for (auto& edge : edges) {
            if (unionSet(edge[0], edge[1])) 
                return edge;
        }
        return {};
    }
};
