class Solution {
private:
    void getprefix(vector<pair<int,int>>& p1, vector<pair<int,int>>& p2,
                   vector<vector<int>>& grid) {
        int n = grid[0].size();
        p1[n - 1] = {grid[0][n - 1] + grid[1][n - 1],1};
        p2[n - 1] = {grid[1][n - 1],-1};

        // for (int i = n - 2; i >= 0; i--) {
        //     p1[i] = grid[0][i] + p1[i + 1];
        //     p2[i] = grid[1][i] + p2[i + 1];

        // }
        for (int i = n - 2; i >= 0; i--) {
            p2[i] = {grid[1][i] + p2[i + 1].first,1};
        }
        for (int i = n - 2; i >= 0; i--) {
            if(p1[i + 1] < p2[i]){
                p1[i] = {grid[0][i] + p2[i].first,1};

            }
            else{
                p1[i] = {grid[0][i] + p1[i + 1].first,0};
            }
        }
        p2[0].first += grid[0][0];
    }

public:
    long long gridGame(vector<vector<int>>& grid) {
        int n = grid[0].size();
        vector<pair<int,int>> p1(n);
        vector<pair<int,int>> p2(n);
        getprefix(p1, p2, grid);

        int ans = 0;
        // int index = 0;
        // int i = 0;
        // while (i < n) {
        //     // ans += grid[index][i];
        //     grid[index][i] = 0;

        //     if (i == n - 1)
        //         break;
        //     if (index == 0) {
        //         p1[i] = 0;
        //         if (p1[i + 1] < p2[i]) {
        //             index = 1;
        //             continue;
        //         }
        //     } else {
        //         p2[i] = 0;
        //     }
        //     i++;
        // }
        // if (index == 0) {
        //     grid[1][n - 1] = 0;
        // }

        // for(auto arr : grid){
        //     for(auto num : arr){
        //         cout<<num<<" ";
        //     }
        //     cout<<endl;
        // }
        //     for(auto num : p1){
        //         cout<<num<<" ";
        //     }
        //     cout<<endl;
        //     for(auto num : p2){
        //         cout<<num<<" ";
        //     }
        //     cout<<endl;



        // getprefix(p1, p2, grid);
        // i = 0, index = 0;

        // ans = max(p1[0],p2[0]);
        
        for(auto num : p1){
            cout<<num.first<<","<<num.second<<" ";
        }
        cout<<endl;
        for(auto num : p2){
            cout<<num.first<<","<<num.second<<" ";
        }
        cout<<endl;

        // while (i < n) {
        //     ans += grid[index][i];
        //     grid[index][i] = 0;

        //     if (i == n - 1)
        //         break;
        //     if (index == 0) {
        //         p1[i] = 0;
        //         if (p1[i + 1] < p2[i]) {
        //             index = 1;
        //             continue;
        //         }
        //     } else {
        //         p2[i] = 0;
        //     }
        //     i++;
        // }
        // if (index == 0) {
        //     ans += grid[1][n - 1];
        // }


        if(p1[0] > p2[0]){
            int i = 0;
            int index = 0;
            // grid[1][n-1] = 0;
            while(i < n){
                grid[index][i] = 0;
                if(index == p1[i].second){
                    i++;
                }
                else index = p1[i].second;
            }
        }
        else{
            
            grid[0][0] = 0;

            for(int i = 0;i < n;i++){
                grid[1][i] = 0;
            }
            
        }


        for(auto arr : grid){
            for(auto num : arr){
                cout<<num<<" ";
            }
            cout<<endl;
        }
        
        getprefix(p1, p2, grid);
        return max(p1[0].first,p2[0].first);
    }
};
