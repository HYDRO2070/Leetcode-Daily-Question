class Solution {
public:
    int minCost(vector<vector<int>>& grid) {
        int rows = grid.size();
        int cols = grid[0].size();
        vector<vector<int>> cost(rows, vector<int>(cols, INT_MAX));
        
        vector<int> dx = {0, 0, 1, -1};
        vector<int> dy = {1, -1, 0, 0};
        
        deque<pair<int, int>> dq;
        dq.push_back({0, 0});
        cost[0][0] = 0;

        while (!dq.empty()) {
            auto [x, y] = dq.front();
            dq.pop_front();
            
            for (int i = 0; i < 4; ++i) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                
                if (nx >= 0 && nx < rows && ny >= 0 && ny < cols) {
                    int newCost = cost[x][y] + (grid[x][y] == i + 1 ? 0 : 1);
                    if (newCost < cost[nx][ny]) {
                        cost[nx][ny] = newCost;
                        if (grid[x][y] == i + 1) {
                            dq.push_front({nx, ny});
                        } else {
                            dq.push_back({nx, ny});
                        }
                    }
                }
            }
        }
        
        return cost[rows - 1][cols - 1];
    }
};


// class Solution {
// private:
//     int solve(vector<vector<int>>& grid, int i, int j, vector<vector<bool>>& visited, vector<vector<int>>& memo) {
//         int n = grid.size();
//         int m = grid[0].size();
        
//         if (i == n - 1 && j == m - 1) return 0;
        
//         if (memo[i][j] != -1) return memo[i][j];
        
//         visited[i][j] = true;
//         int ans = 10000;

//         if (j + 1 < m && !visited[i][j + 1]) {
//             int temp = solve(grid, i, j + 1, visited, memo);
//             if (grid[i][j] != 1) temp += 1;
//             ans = min(ans, temp);
//         }
//         if (j - 1 >= 0 && !visited[i][j - 1]) {
//             int temp = solve(grid, i, j - 1, visited, memo);
//             if (grid[i][j] != 2) temp += 1;
//             ans = min(ans, temp);
//         }
//         if (i - 1 >= 0 && !visited[i - 1][j]) {
//             int temp = solve(grid, i - 1, j, visited, memo);
//             if (grid[i][j] != 4) temp += 1;
//             ans = min(ans, temp);
//         }
//         if (i + 1 < n && !visited[i + 1][j]) {
//             int temp = solve(grid, i + 1, j, visited, memo);
//             if (grid[i][j] != 3) temp += 1;
//             ans = min(ans, temp);
//         }
        
//         visited[i][j] = false;

//         return memo[i][j] = ans;
//     }

// public:
//     int minCost(vector<vector<int>>& grid) {
//         int n = grid.size();
//         int m = grid[0].size();

//         vector<vector<bool>> visited(n, vector<bool>(m, false));
//         vector<vector<int>> memo(n, vector<int>(m, -1));

//         return solve(grid, 0, 0, visited, memo);
//     }
// };
