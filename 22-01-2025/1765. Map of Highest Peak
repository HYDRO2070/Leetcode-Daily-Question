class Solution {
public:
    vector<vector<int>> highestPeak(vector<vector<int>>& mat) {
        int n = mat.size();
        int m = mat[0].size();

        vector<vector<int>> d(n,vector<int>(m,INT_MAX));

        queue<pair<int,int>> q;

        for(int i =0;i < n;i++){
            for(int j = 0;j < m;j++){
                if(mat[i][j] == 1){
                    d[i][j] = 0;
                    q.push({i,j});
                }
            }
        }
        vector<pair<int,int>> index = {{-1,0},{0,-1},{1,0},{0,1}};
        while(!q.empty()){
            auto temp = q.front();
            q.pop();

            
            for(int i = 0;i < 4;i++){
                int x = temp.first + index[i].first;
                int y = temp.second + index[i].second;

                if(x >=0 && x < n && y >= 0 && y < m && d[x][y] > d[temp.first][temp.second] + 1){
                    d[x][y] = d[temp.first][temp.second] + 1;
                q.push({x,y});
                }
            }


        }
        return d;
    }
};
